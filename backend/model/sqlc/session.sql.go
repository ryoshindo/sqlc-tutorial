// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: session.sql

package generatedsqlc

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, account_id, token, expires_at, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateSessionParams struct {
	ID        string
	AccountID string
	Token     string
	ExpiresAt time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.AccountID,
		arg.Token,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const findByToken = `-- name: FindByToken :one
SELECT id, account_id, token, expires_at, created_at, updated_at FROM sessions WHERE token = $1
`

func (q *Queries) FindByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, findByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
